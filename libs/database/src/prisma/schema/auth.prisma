enum Role {
  USER
  ADMIN
}

model User {
  id String @id @default(cuid())

  email  String  @unique
  pseudo String? @unique
  name   String?
  image  String?

  lang   String  @default("en")
  active Boolean @default(false)

  stripeCustomerId String? @unique
  rememberMeToken  String?
  emailVerified    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  role     Role      @default(USER)

  profile Profile?
  address Address?

  notifications Notification[]
  Subscription  Subscription[]
  newsletter    Newsletter[]
  Account       Account[]
}

model Account {
  id String @id @default(cuid())

  accountId  String
  providerId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken  String?
  refreshToken String?
  idToken      String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?

  scope     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id String @id @default(cuid())

  firstName String
  lastName  String
  birthday  DateTime

  avatar  String?
  bio     String?
  website String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Address {
  id   String  @id @default(cuid())
  name String?

  street          String
  street_optional String?
  city            String
  state           String?
  postalCode      String?
  country         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])
}

model Session {
  id String @id @default(cuid())

  token String

  createdAt DateTime?
  updatedAt DateTime?
  expiresAt DateTime

  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
}

model Verification {
  id String @id @default(cuid())

  identifier String
  value      String

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
